// 0=Kinect; 1=PrimeSense; 2=KinectOne; 3=BinaryDumpReader; 4=NetworkSensor; 5=IntelSensor; 6=RealSense 
s_sensorIdx = 0; // CHAO NOTE: this parameter MUST be 0 if you want to read RGB-D data from local files

// CHAO: true if you want to save scanned RGB-D images into file
s_bSaveRGBDImages = false;

s_windowWidth = 800;//640;			//render window width (default 1280)
s_windowHeight = 600;//480;		//render window height (default 1024)

s_adapterWidth = 640;				//input depth gets re-sampled to this width (decrease to improve perf.)
s_adapterHeight = 480;				//input depth gets re-sampled to this height (decrease to improve perf.)

s_sensorDepthMax = 5.0f;	//maximum sensor depth in meter
s_sensorDepthMin = 0.5f;	//minimum sensor depth in meter

// cropping options for PrimeSense & Asus Xtion Pro
s_enableColorCropping = false;
s_colorCropX = 320;
s_colorCropY = 272;
s_colorCropWidth = 640;
s_colorCropHeight = 480;

// sdf and hash settings
//s_SDFVoxelSize = 0.004f;				// Original parameter: voxel size in meter (4mm), the larger the rougher of the mesh
s_SDFVoxelSize = 0.008f;				// Use a large parameter to avoid GPU memory shortage (actually 0.005 looks pretty good)
s_SDFMarchingCubeThreshFactor = 10.0f;	//marching cube thresh: s_SDFMarchingCubeThresh = s_SDFMarchingCubeThreshFactor*s_SDFVoxelSize
s_SDFTruncation = 0.02f;				//truncation in meter
s_SDFTruncationScale = 0.01f;			//truncation scale in meter per meter
s_SDFMaxIntegrationDistance = 3.0f;		//maximum integration in meter
s_SDFIntegrationWeightSample = 10;		//weight for an integrated depth value
s_SDFIntegrationWeightMax = 255;		//maximum integration weight for a voxel
// s_SDFBlockSize is pound defined (SDF_BLOCK_SIZE)
// s_hashBucketSize is pound defined (HASH_BUCKET_SIZE)

// Original parameters (sometimes this memory is too large for some GPU that the program gives some runtime error about memory)
//s_hashNumBuckets = 500000;				//smaller voxels require more space
//s_hashNumSDFBlocks = 262144;//100000;	//smaller voxels require more space
// New parameters (use smaller values to reduce GPU memory usage, but this will restrain the scale of the model)
s_hashNumBuckets = 100000;				
s_hashNumSDFBlocks = 100000;//100000;	

s_hashMaxCollisionLinkedListSize = 7;

// raycast
s_SDFRayIncrementFactor = 0.8f;			//(don't touch) s_SDFRayIncrement = s_SDFRayIncrementFactor*s_SDFTrunaction;
s_SDFRayThresSampleDistFactor = 50.5f;	//(don't touch) s_SDFRayThresSampleDist = s_SDFRayThresSampleDistFactor*s_rayIncrement;
s_SDFRayThresDistFactor = 50.0f;		//(don't touch) s_SDFRayThresDist = s_SDFRayThresSampleDistFactor*s_rayIncrement;
s_SDFUseGradients 		= false;		//analytic gradients for rendering

s_binaryDumpSensorFile = "Dump/recording1.sensor";
s_binaryDumpSensorUseTrajectory = false;

// filtering
s_depthSigmaD = 2.0f;	//bilateral filter sigma domain
s_depthSigmaR = 0.1f;	//bilateral filter sigma range
s_depthFilter = true;	//bilateral filter enabled depth

s_colorSigmaD = 2.0f;	//bilateral filter sigma domain
s_colorSigmaR = 0.1f;	//bilateral filter sigma range
s_colorFilter = true;	//bilateral filter enabled depth

s_integrationEnabled		= true;
s_trackingEnabled			= true;
s_timingsDetailledEnabled   = false;	//enable timing output
s_timingsTotalEnabled		= false;	//enable timing output
s_garbageCollectionEnabled	= false;
s_garbageCollectionStarve	= 15;		//decrement the voxel weight every n'th frame

// rendering
s_materialShininess 	= 16.0f;
//s_materialAmbient   	= 0.75f 0.65f 0.5f 1.0f; // Original value (this will cover the RGB color during rendering)
//s_materialAmbient   	= 0.25f 0.15f 0.1f 1.0f;
s_materialDiffuse 		= 1.0f 0.9f 0.7f 1.0f;
s_materialSpecular 		= 1.0f 1.0f 1.0f 1.0f;
//s_lightAmbient 			= 0.4f 0.4f 0.4f 1.0f;
s_lightAmbient = 1.0f 1.0f 1.0f 1.0f; // CHAO: make the scene much lighter
//s_lightAmbient = 0.5f 0.5f 0.5f 1.0f; // CHAO: make the scene much lighter
//s_lightDiffuse 			= 0.6f 0.52944f 0.4566f 0.6f;
s_lightDiffuse 			= 1.0f 1.0f 1.0f 1.0f;
//s_lightSpecular 		= 0.3f 0.3f 0.3f 1.0f;
s_lightSpecular 		= 1.0f 1.0f 1.0f 1.0f;
//s_lightDirection 		= 0.0f -1.0f 2.0f;
s_lightDirection = 0.0f 1.0f 2.0f 1.0f;

s_RenderMode = 1;

s_useColorForRendering		= false;
s_playData = true;

s_renderingDepthDiscontinuityThresOffset = 0.012f;  // discontinuity offset in meter
s_renderingDepthDiscontinuityThresLin	 = 0.001f; // additional discontinuity threshold per meter
s_remappingDepthDiscontinuityThresOffset = 0.012f; // discontinuity offset in meter
//s_remappingDepthDiscontinuityThresLin	 = 0.001f; // additional discontinuity threshold per meter
s_remappingDepthDiscontinuityThresLin	 = 0.016f;

s_bUseCameraCalibration = false;

s_marchingCubesMaxNumTriangles = 2500000; // max buffer size for marching cube

//streaming parameters
s_streamingEnabled = true;
s_streamingVoxelExtents = 1.0f 1.0f 1.0f;
s_streamingGridDimensions = 257 257 257; // dimensions have to be odd (number of samples)
s_streamingMinGridPos = -128 -128 -128;
s_streamingInitialChunkListSize = 2000;
s_streamingRadius = 5.0f; // Depends on DepthMin and DepthMax 
s_streamingPos = 0.0f 0.0f 3.0f 1.0f; // Depends on DepthMin and DepthMax
s_streamingOutParts = 80;	// number of frames required to sweep through the entire hash

//recording of the input data
s_recordData = false;
s_recordDataFile = "Dump/recording.sensor";
s_reconstructionEnabled = true;
